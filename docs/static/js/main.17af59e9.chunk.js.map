{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GiftExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAa5C,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAQ,IAGzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAAW,SAAAP,GAAC,OAAIF,EAAcE,EAAEQ,OAAOF,a,+BCrBtCG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAIA,QCyBDO,EAxBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHJ,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA8BtC,OAtBAC,qBAAU,WACPxB,EAAQC,GACPwB,MAAM,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAS,MAEd,UAER,CAACpB,IAYGqB,EDxBwBM,CAAa3B,GAAhCa,EAHgB,EAGrBN,KAAaa,EAHQ,EAGRA,QAEpB,OACI,qCACA,6BAAKpB,IACJoB,GAAW,2CAEV,qBAAKJ,UAAU,YAAf,SAEUH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADGA,EAAIC,aEoBpBiB,EApCO,WAAO,IAAD,EACY1C,mBAAS,CAAC,gBADtB,mBACjB2C,EADiB,KACL5C,EADK,KAcxB,OACI,qCACI,+CACA,uBAGA,cAAC,EAAD,CAAaA,cAAiBA,IAE9B,6BAEQ4C,EAAWpB,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CAA0BA,SAAUA,GAApBA,YClBhC8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.17af59e9.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n        if(inputValue.trim().length >0)\n        {\n            //de 'cats' obtenemos el estado anterior, es decir el arreglo original, y lo añadimos al 'nuevo arreglo';\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n\n    }\n    return (\n        <form onSubmit= {handleSubmit}>\n            <input \n            type=\"text\"\n            value={inputValue}\n            onChange= {e => setInputValue(e.target.value)}\n            ></input>\n            {/*<h2>Add Category:{props.categories}</h2>*/}\n        </form>\n    )\n};\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async(category) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=M2qUWbQANJpqcrlGKW6vQob2BucztxwJ`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__zoomInDown\">\n            <img src = {url} alt = {title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","// import React, {useState, useEffect} from 'react'\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n// import PropTypes from 'prop-types'\n\nconst GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([]);\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n        <h3>{category}</h3>\n        {loading && <p>Loading...</p>} \n        {/* {Si loading es true, entonces pone el párrafo loading} */}\n        { <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                        key = {img.id}\n                        {...img}/>\n                        //Se envía el ID y con ... cada uno de los elementos del objeto img\n                    ))\n                }\n        </div> }\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useState, useEffect} from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n//Este es un custom hook, tiene la misma estructura que un componente pero sin importarse de React ni regresar JSX\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n\n    //Esto se ejecuta solo cuando 'category' cambia\n    useEffect(() => {\n       getGifs(category)\n       .then( imgs => {\n            setTimeout(() => {\n                setstate({\n                    data:imgs,\n                    loading: false\n                });\n            }, 2000);\n       });\n    }, [category])\n    //En el arreglo se especifica lo que estará escuchando si cambia\n    //Equivalente a DidMount\n/*\n    setTimeout(() => {\n        setstate({\n            data:[],\n            loading: false\n        });\n    }, 3000);\n\n    */\n    return state;\n\n}\n","import React, { useState } from 'react'\nimport {AddCategory} from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n// import PropTypes from 'prop-types'\n\nconst GiftExpertApp = () => {\n    const [categories, setCategories] = useState(['Sailor Moon']);\n    \n    /*\n    const handleAdd = () =>{\n\n        //Puede ser de esta forma, usando el operador Spread para obtener cada uno de los elementos originales\n        setCategories(['Utena', ...categories]);\n\n        //De esta otra forma, el SET recibe un callback en el cual el primer argumento es el valor del estado anterior y luego regresa el nuevo estado \n        setCategories(cats => ['Utena', ...cats]);\n    }\n    */\n\n    return (\n        <>\n            <h2>GiftExpertApp</h2>\n            <hr></hr>\n\n            {/* <button onClick = {handleAdd}>Agregar</button>*/}\n            <AddCategory setCategories = {setCategories}/>\n\n            <ol>\n                {\n                    categories.map( category => {\n                        return <GifGrid key = {category} category={category}/>\n                        // {<li key = {category}> {category}</li>}\n                    })\n\n                }\n            </ol>\n        </>\n    )\n}\n\n\nexport default GiftExpertApp\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GiftExpertApp from './GiftExpertApp'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}